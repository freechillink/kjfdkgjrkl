class h{static sanitizeId(r){if(!r||typeof r!="string")return null;const t=r.replace(/[^a-zA-Z0-9\-_]/g,"");return t.length>0&&t.length<50?t:null}static sanitizeNumber(r){return typeof r!="number"||isNaN(r)||r<1||r>9999?null:Math.floor(r)}static async findStreamingSources(r,t,o,n){try{console.log(`Finding streaming sources for ${t} ID: ${r}${o&&n?`  S${o}E${n}`:""}`);const e=await this.getPrimaryStreamingSources(r,t,o,n);return e.length>0?(console.log(`Found ${e.length} streaming sources`),e):(console.log("No streaming sources found for:",r),[])}catch(e){return console.error("Error finding streaming sources:",e),[]}}static async getPrimaryStreamingSources(r,t,o,n){try{const e=[],c=this.sanitizeId(r),i=o?this.sanitizeNumber(o):void 0,a=n?this.sanitizeNumber(n):void 0;return c?(console.log(`Generating VidKing source for ${t} ID: ${c}${i&&a?`  S${i}E${a}`:""}`),t==="tv"&&i&&a?e.push({url:`https://www.vidking.net/embed/tv/${c}/${i}/${a}?color=e50914&autoPlay=true&nextEpisode=true&episodeSelector=true`,quality:"1080p",type:"embed",provider:"VidKing"}):e.push({url:`https://www.vidking.net/embed/movie/${c}?color=e50914&autoPlay=true`,quality:"1080p",type:"embed",provider:"VidKing"}),console.log("Generated VidKing source:",e.map(s=>({provider:s.provider,quality:s.quality,type:s.type}))),e):(console.error("Invalid movie ID provided"),[])}catch(e){return console.error("VidKing source generation error:",e),[]}}static async validateStreamUrl(r){try{return(await fetch(r,{method:"HEAD"})).ok}catch{return!1}}static async getBestStream(r,t,o,n){try{const e=await this.findStreamingSources(r,t,o,n);return!e||e.length===0?(console.log("No streaming sources available for:",r),null):e[0].type==="embed"?e[0]:e.sort((i,a)=>{const s={"1080p":3,"720p":2,"480p":1,"360p":0},l=s[i.quality]||0;return(s[a.quality]||0)-l})[0]}catch(e){return console.error("Error getting best stream:",e),null}}static async hasStreamingSources(r,t){try{return(await this.findStreamingSources(r,t)).length>0}catch(o){return console.error("Error checking streaming availability:",o),!1}}static async filterAvailableContent(r,t){const o=[];for(let e=0;e<r.length;e+=5){const i=r.slice(e,e+5).map(async s=>{const l=await this.hasStreamingSources(s.id,t);return{item:s,hasStreams:l}});(await Promise.all(i)).forEach(({item:s,hasStreams:l})=>{l&&o.push(s)}),e+5<r.length&&await new Promise(s=>setTimeout(s,500))}return o}static async getYouTubeTrailer(r){try{return`https://www.youtube.com/results?search_query=${encodeURIComponent(`${r} official trailer`)}`}catch(t){return console.error("Error finding YouTube trailer:",t),null}}static async getEmbedPlayer(r,t){try{return`https://example-embed-player.com/${t}/${r}`}catch(o){return console.error("Error getting embed player:",o),null}}}export{h as StreamingService};
