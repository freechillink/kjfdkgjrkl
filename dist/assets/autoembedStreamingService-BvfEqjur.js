class l{static sanitizeId(e){if(!e||typeof e!="string")return null;const t=e.replace(/[^a-zA-Z0-9\-_]/g,"");return t.length>0&&t.length<50?t:null}static sanitizeNumber(e){return typeof e!="number"||isNaN(e)||e<1||e>9999?null:Math.floor(e)}static async findStreamingSources(e,t,o,n){try{console.log(`Finding AutoEmbed sources for ${t} ID: ${e}${o&&n?`  S${o}E${n}`:""}`);const r=await this.getAutoEmbedSources(e,t,o,n);return r.length>0?(console.log(`Found ${r.length} AutoEmbed sources`),r):(console.log("No AutoEmbed sources found for:",e),[])}catch(r){return console.error("Error finding AutoEmbed sources:",r),[]}}static async getAutoEmbedSources(e,t,o,n){try{const r=[],s=this.sanitizeId(e),i=o?this.sanitizeNumber(o):void 0,u=n?this.sanitizeNumber(n):void 0;return s?(console.log(`Generating AutoEmbed source for ${t} ID: ${s}${i&&u?`  S${i}E${u}`:""}`),t==="tv"&&i&&u?r.push({url:`https://autoembed.co/tv/tmdb/${s}-${i}-${u}`,quality:"720p",type:"embed",provider:"AutoEmbed"}):r.push({url:`https://autoembed.co/movie/tmdb/${s}`,quality:"720p",type:"embed",provider:"AutoEmbed"}),console.log("Generated AutoEmbed source:",r.map(c=>({provider:c.provider,quality:c.quality,type:c.type}))),r):(console.error("Invalid movie ID provided"),[])}catch(r){return console.error("AutoEmbed source generation error:",r),[]}}static async getBestStream(e,t,o,n){try{const r=await this.findStreamingSources(e,t,o,n);return!r||r.length===0?(console.log("No AutoEmbed sources available for:",e),null):r[0]}catch(r){return console.error("Error getting best AutoEmbed stream:",r),null}}}export{l as StreamingService};
