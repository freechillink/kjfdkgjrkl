class u{static sanitizeId(r){if(!r||typeof r!="string")return null;const e=r.replace(/[^a-zA-Z0-9\-_]/g,"");return e.length>0&&e.length<50?e:null}static sanitizeNumber(r){return typeof r!="number"||isNaN(r)||r<1||r>9999?null:Math.floor(r)}static async findStreamingSources(r,e,o,i){try{console.log(`Finding VidSrc.to sources for ${e} ID: ${r}${o&&i?`  S${o}E${i}`:""}`);const t=await this.getVidSrcToSources(r,e,o,i);return t.length>0?(console.log(`Found ${t.length} VidSrc.to sources`),t):(console.log("No VidSrc.to sources found for:",r),[])}catch(t){return console.error("Error finding VidSrc.to sources:",t),[]}}static async getVidSrcToSources(r,e,o,i){try{const t=[],s=this.sanitizeId(r),n=o?this.sanitizeNumber(o):void 0,c=i?this.sanitizeNumber(i):void 0;return s?(console.log(`Generating VidSrc.to source for ${e} ID: ${s}${n&&c?`  S${n}E${c}`:""}`),e==="tv"&&n&&c?t.push({url:`https://vidsrc.to/embed/tv/${s}/${n}/${c}`,quality:"1080p",type:"embed",provider:"VidSrc.to"}):t.push({url:`https://vidsrc.to/embed/movie/${s}`,quality:"1080p",type:"embed",provider:"VidSrc.to"}),console.log("Generated VidSrc.to source:",t.map(a=>({provider:a.provider,quality:a.quality,type:a.type}))),t):(console.error("Invalid movie ID provided"),[])}catch(t){return console.error("VidSrc.to source generation error:",t),[]}}static async getBestStream(r,e,o,i){try{const t=await this.findStreamingSources(r,e,o,i);return!t||t.length===0?(console.log("No VidSrc.to sources available for:",r),null):t[0]}catch(t){return console.error("Error getting best VidSrc.to stream:",t),null}}}export{u as StreamingService};
