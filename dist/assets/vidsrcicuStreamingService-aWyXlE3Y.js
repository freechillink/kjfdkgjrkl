class l{static sanitizeId(r){if(!r||typeof r!="string")return null;const t=r.replace(/[^a-zA-Z0-9\-_]/g,"");return t.length>0&&t.length<50?t:null}static sanitizeNumber(r){return typeof r!="number"||isNaN(r)||r<1||r>9999?null:Math.floor(r)}static async findStreamingSources(r,t,i,c){try{console.log(`Finding VidSrc.icu sources for ${t} ID: ${r}${i&&c?`  S${i}E${c}`:""}`);const e=await this.getVidSrcIcuSources(r,t,i,c);return e.length>0?(console.log(`Found ${e.length} VidSrc.icu sources`),e):(console.log("No VidSrc.icu sources found for:",r),[])}catch(e){return console.error("Error finding VidSrc.icu sources:",e),[]}}static async getVidSrcIcuSources(r,t,i,c){try{const e=[],o=this.sanitizeId(r),s=i?this.sanitizeNumber(i):void 0,n=c?this.sanitizeNumber(c):void 0;return o?(console.log(`Generating VidSrc.icu source for ${t} ID: ${o}${s&&n?`  S${s}E${n}`:""}`),t==="tv"&&s&&n?e.push({url:`https://vidsrc.icu/embed/tv/${o}/${s}/${n}`,quality:"1080p",type:"embed",provider:"VidSrc.icu"}):e.push({url:`https://vidsrc.icu/embed/movie/${o}`,quality:"1080p",type:"embed",provider:"VidSrc.icu"}),console.log("Generated VidSrc.icu source:",e.map(u=>({provider:u.provider,quality:u.quality,type:u.type}))),e):(console.error("Invalid movie ID provided"),[])}catch(e){return console.error("VidSrc.icu source generation error:",e),[]}}static async getBestStream(r,t,i,c){try{const e=await this.findStreamingSources(r,t,i,c);return!e||e.length===0?(console.log("No VidSrc.icu sources available for:",r),null):e[0]}catch(e){return console.error("Error getting best VidSrc.icu stream:",e),null}}}export{l as StreamingService};
