import{_ as u}from"./index-CZSZZV6j.js";class h{static async findStreamingSources(e,i,a,o,n){try{if(console.log(`Finding streaming sources for ${i} ID: ${e}${a&&o?`  S${a}E${o}`:""}`),!n||n==="vidking"){const{StreamingService:S}=await u(async()=>{const{StreamingService:r}=await import("./vidkingStreamingService-CfZmOFQ7.js");return{StreamingService:r}},[]);return await S.findStreamingSources(e,i,a,o)}if(n==="vidsrcxyz"){const{StreamingService:S}=await u(async()=>{const{StreamingService:r}=await import("./vidsrcxyzStreamingService-BPxe5Qk8.js");return{StreamingService:r}},[]);return await S.findStreamingSources(e,i,a,o)}if(n==="vidlink"){const{StreamingService:S}=await u(async()=>{const{StreamingService:r}=await import("./vidlinkStreamingService-7ukj7PR6.js");return{StreamingService:r}},[]);return await S.findStreamingSources(e,i,a,o)}if(n==="vidsrcicu"){const{StreamingService:S}=await u(async()=>{const{StreamingService:r}=await import("./vidsrcicuStreamingService-aWyXlE3Y.js");return{StreamingService:r}},[]);return await S.findStreamingSources(e,i,a,o)}if(n==="vidsrcto"){const{StreamingService:S}=await u(async()=>{const{StreamingService:r}=await import("./vidsrctoStreamingService-CMotsLXJ.js");return{StreamingService:r}},[]);return await S.findStreamingSources(e,i,a,o)}if(n==="autoembed"){const{StreamingService:S}=await u(async()=>{const{StreamingService:r}=await import("./autoembedStreamingService-BvfEqjur.js");return{StreamingService:r}},[]);return await S.findStreamingSources(e,i,a,o)}const s=this.generateProviderSources(e,i,a,o,n);return s.length>0?(console.log(`Generated ${s.length} streaming sources for provider: ${n||"all"}`),s):(console.log("No streaming sources found for:",e),[])}catch(s){return console.error("Error finding streaming sources:",s),[]}}static generateProviderSources(e,i,a,o,n){const s=[],S={vidsrccc:{movie:r=>`https://vidsrc.cc/v2/embed/movie/${r}`,tv:(r,t,c)=>`https://vidsrc.cc/v2/embed/tv/${r}/${t}/${c}`,name:"VidSrc.cc"},vidsrcxyz:{movie:r=>`https://vidsrc.me/embed/movie?tmdb=${r}`,tv:(r,t,c)=>`https://vidsrc.me/embed/tv?tmdb=${r}&season=${t}&episode=${c}`,name:"VidSrc.xyz"},vidlink:{movie:r=>`https://vidlink.pro/movie/${r}`,tv:(r,t,c)=>`https://vidlink.pro/tv/${r}/${t}/${c}`,name:"VidLink.pro"},vidsrcicu:{movie:r=>`https://vidsrc.icu/embed/movie/${r}`,tv:(r,t,c)=>`https://vidsrc.icu/embed/tv/${r}/${t}/${c}`,name:"VidSrc.icu"},vidsrcto:{movie:r=>`https://vidsrc.to/embed/movie/${r}`,tv:(r,t,c)=>`https://vidsrc.to/embed/tv/${r}/${t}/${c}`,name:"VidSrc.to"},autoembed:{movie:r=>`https://autoembed.co/movie/tmdb/${r}`,tv:(r,t,c)=>`https://autoembed.co/tv/tmdb/${r}-${t}-${c}`,name:"AutoEmbed"}};if(n&&S[n]){const r=S[n];let t;i==="tv"&&a&&o?t=r.tv(e,a,o):t=r.movie(e),s.push({url:t,quality:n==="autoembed"?"720p":"1080p",type:"embed",provider:r.name}),console.log(`Generated source for ${n}:`,t)}else Object.entries(S).forEach(([r,t])=>{let c;i==="tv"&&a&&o?c=t.tv(e,a,o):c=t.movie(e),s.push({url:c,quality:r==="autoembed"?"720p":"1080p",type:"embed",provider:t.name})});return s}static async validateStreamUrl(e){try{return(await fetch(e,{method:"HEAD"})).ok}catch{return!1}}static async getBestStream(e,i,a,o,n){try{if(n==="vidking"){const{StreamingService:r}=await u(async()=>{const{StreamingService:t}=await import("./vidkingStreamingService-CfZmOFQ7.js");return{StreamingService:t}},[]);return await r.getBestStream(e,i,a,o)}const s=await this.findStreamingSources(e,i,a,o,n);return!s||s.length===0?(console.log("No streaming sources available for:",e),null):s[0].type==="embed"?s[0]:s.sort((r,t)=>{const c={"1080p":3,"720p":2,"480p":1,"360p":0},m=c[r.quality]||0;return(c[t.quality]||0)-m})[0]}catch(s){return console.error("Error getting best stream:",s),null}}static async hasStreamingSources(e,i){try{return(await this.findStreamingSources(e,i)).length>0}catch(a){return console.error("Error checking streaming availability:",a),!1}}static async filterAvailableContent(e,i){const a=[];for(let n=0;n<e.length;n+=5){const S=e.slice(n,n+5).map(async t=>{const c=await this.hasStreamingSources(t.id,i);return{item:t,hasStreams:c}});(await Promise.all(S)).forEach(({item:t,hasStreams:c})=>{c&&a.push(t)}),n+5<e.length&&await new Promise(t=>setTimeout(t,500))}return a}static async getYouTubeTrailer(e){try{return`https://www.youtube.com/results?search_query=${encodeURIComponent(`${e} official trailer`)}`}catch(i){return console.error("Error finding YouTube trailer:",i),null}}static async getEmbedPlayer(e,i){try{return`https://example-embed-player.com/${i}/${e}`}catch(a){return console.error("Error getting embed player:",a),null}}}export{h as StreamingService};
