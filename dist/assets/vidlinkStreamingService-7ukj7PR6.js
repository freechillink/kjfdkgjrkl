class u{static sanitizeId(r){if(!r||typeof r!="string")return null;const i=r.replace(/[^a-zA-Z0-9\-_]/g,"");return i.length>0&&i.length<50?i:null}static sanitizeNumber(r){return typeof r!="number"||isNaN(r)||r<1||r>9999?null:Math.floor(r)}static async findStreamingSources(r,i,t,o){try{console.log(`Finding VidLink.pro sources for ${i} ID: ${r}${t&&o?`  S${t}E${o}`:""}`);const e=await this.getVidLinkSources(r,i,t,o);return e.length>0?(console.log(`Found ${e.length} VidLink.pro sources`),e):(console.log("No VidLink.pro sources found for:",r),[])}catch(e){return console.error("Error finding VidLink.pro sources:",e),[]}}static async getVidLinkSources(r,i,t,o){try{const e=[],n=this.sanitizeId(r),s=t?this.sanitizeNumber(t):void 0,c=o?this.sanitizeNumber(o):void 0;return n?(console.log(`Generating VidLink.pro source for ${i} ID: ${n}${s&&c?`  S${s}E${c}`:""}`),i==="tv"&&s&&c?e.push({url:`https://vidlink.pro/tv/${n}/${s}/${c}`,quality:"1080p",type:"embed",provider:"VidLink.pro"}):e.push({url:`https://vidlink.pro/movie/${n}`,quality:"1080p",type:"embed",provider:"VidLink.pro"}),console.log("Generated VidLink.pro source:",e.map(l=>({provider:l.provider,quality:l.quality,type:l.type}))),e):(console.error("Invalid movie ID provided"),[])}catch(e){return console.error("VidLink.pro source generation error:",e),[]}}static async getBestStream(r,i,t,o){try{const e=await this.findStreamingSources(r,i,t,o);return!e||e.length===0?(console.log("No VidLink.pro sources available for:",r),null):e[0]}catch(e){return console.error("Error getting best VidLink.pro stream:",e),null}}}export{u as StreamingService};
