class u{static sanitizeId(r){if(!r||typeof r!="string")return null;const t=r.replace(/[^a-zA-Z0-9\-_]/g,"");return t.length>0&&t.length<50?t:null}static sanitizeNumber(r){return typeof r!="number"||isNaN(r)||r<1||r>9999?null:Math.floor(r)}static async findStreamingSources(r,t,i,o){try{console.log(`Finding VidSrc.xyz sources for ${t} ID: ${r}${i&&o?`  S${i}E${o}`:""}`);const e=await this.getVidSrcXyzSources(r,t,i,o);return e.length>0?(console.log(`Found ${e.length} VidSrc.xyz sources`),e):(console.log("No VidSrc.xyz sources found for:",r),[])}catch(e){return console.error("Error finding VidSrc.xyz sources:",e),[]}}static async getVidSrcXyzSources(r,t,i,o){try{const e=[],s=this.sanitizeId(r),n=i?this.sanitizeNumber(i):void 0,c=o?this.sanitizeNumber(o):void 0;return s?(console.log(`Generating VidSrc.xyz source for ${t} ID: ${s}${n&&c?`  S${n}E${c}`:""}`),t==="tv"&&n&&c?e.push({url:`https://vidsrc.xyz/embed/tv/${s}/${n}/${c}`,quality:"1080p",type:"embed",provider:"VidSrc.xyz"}):e.push({url:`https://vidsrc.xyz/embed/movie/${s}`,quality:"1080p",type:"embed",provider:"VidSrc.xyz"}),console.log("Generated VidSrc.xyz source:",e.map(a=>({provider:a.provider,quality:a.quality,type:a.type}))),e):(console.error("Invalid movie ID provided"),[])}catch(e){return console.error("VidSrc.xyz source generation error:",e),[]}}static async getBestStream(r,t,i,o){try{const e=await this.findStreamingSources(r,t,i,o);return!e||e.length===0?(console.log("No VidSrc.xyz sources available for:",r),null):e[0]}catch(e){return console.error("Error getting best VidSrc.xyz stream:",e),null}}}export{u as StreamingService};
