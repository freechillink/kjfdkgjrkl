const h="moviedb-watch-history";let i=[];class v{static isLocalStorageAvailable(){try{const t="__localStorage_test__";return localStorage.setItem(t,"test"),localStorage.removeItem(t),!0}catch{return console.warn("localStorage not available, using memory storage"),!1}}static getWatchHistory(){try{if(this.isLocalStorageAvailable()){const t=localStorage.getItem(h);return t?JSON.parse(t):[]}else return[...i]}catch(t){return console.error("Error loading watch history, using memory fallback:",t),[...i]}}static saveWatchHistory(t){try{this.isLocalStorageAvailable()?localStorage.setItem(h,JSON.stringify(t)):i=[...t]}catch(e){console.error("Error saving watch history, using memory fallback:",e),i=[...t]}}static updateWatchHistory(t,e,s,a,r,o,c){try{const n=this.getWatchHistory(),g=a==="movie"?t.title:t.name,y={id:t.id.toString(),type:a,title:g,poster_path:t.poster_path,backdrop_path:t.backdrop_path,progress:e,duration:s,lastWatched:new Date().toISOString(),completed:e/s>.95,season:r,episode:o,episodeTitle:c},u=n.filter(l=>l.id!==t.id.toString()||l.type!==a?!0:a==="tv"&&r!==void 0&&o!==void 0?!(l.season===r&&l.episode===o):!1),d=[y,...u].slice(0,50);this.saveWatchHistory(d)}catch(n){console.error("Error updating watch history:",n)}}static getContinueWatching(){const t=this.getWatchHistory(),e=new Map;return t.forEach(r=>{const o=r.type==="tv"?`${r.id}-${r.type}`:`${r.id}-${r.type}`,c=e.get(o);(!c||new Date(r.lastWatched)>new Date(c.lastWatched))&&e.set(o,r)}),Array.from(e.values()).filter(r=>{const o=r.duration>0?r.progress/r.duration:0,c=r.progress>=30,n=!r.completed&&o<.98;return c&&n}).sort((r,o)=>new Date(o.lastWatched).getTime()-new Date(r.lastWatched).getTime()).slice(0,20)}static getRecentlyWatched(){return this.getWatchHistory().sort((t,e)=>new Date(e.lastWatched).getTime()-new Date(t.lastWatched).getTime()).slice(0,10)}static getWatchProgress(t,e,s,a){const r=this.getWatchHistory();return e==="tv"&&s!==void 0&&a!==void 0?r.find(o=>o.id===t&&o.type===e&&o.season===s&&o.episode===a)||null:r.find(o=>o.id===t&&o.type===e)||null}static removeFromHistory(t,e,s,a){try{const r=this.getWatchHistory();let o;e==="tv"&&s!==void 0&&a!==void 0?o=r.filter(c=>!(c.id===t&&c.type===e&&c.season===s&&c.episode===a)):o=r.filter(c=>!(c.id===t&&c.type===e)),this.saveWatchHistory(o)}catch(r){console.error("Error removing from watch history:",r)}}static clearHistory(){try{this.isLocalStorageAvailable()&&localStorage.removeItem(h),i=[]}catch(t){console.error("Error clearing watch history:",t),i=[]}}static clearDemoHistory(){try{const t=this.getWatchHistory(),e=t.filter(s=>!(s.title==="Brooklyn Nine-Nine"&&s.progress===600||s.title==="King of the Hill"&&s.progress===600||s.progress===600&&s.duration===7200));e.length!==t.length&&(console.log(`ðŸ§¹ Cleared ${t.length-e.length} fake watch history entries`),this.saveWatchHistory(e))}catch(t){console.error("Error clearing demo history:",t)}}static formatProgress(t,e){return e===0?"0%":`${Math.round(t/e*100)}%`}static formatTimeRemaining(t,e){if(e<=0||t<0)return"0m left";const s=Math.max(0,e-t),a=Math.floor(s/3600),r=Math.floor(s%3600/60);return a>0?`${a}h ${r}m left`:`${r}m left`}}export{v as W};
